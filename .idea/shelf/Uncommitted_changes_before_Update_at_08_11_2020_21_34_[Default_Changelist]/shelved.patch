Index: app/src/main/java/com/missclick/smartschedule/notifications/Receiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.missclick.smartschedule.notifications\r\n\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Build\r\nimport android.R\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport com.missclick.smartschedule.MainActivity\r\n\r\n\r\nclass Receiver : BroadcastReceiver() {\r\n    override fun onReceive(context: Context, intent: Intent) {\r\n        val type = intent.getIntExtra(CustomMessage.TYPE_EXTRA, 0)\r\n        var zoom = intent.getStringExtra(\"zoom\")\r\n        val intentToRepeat = Intent(context, MainActivity::class.java)\r\n        intentToRepeat.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        val pendingIntent = PendingIntent.getActivity(context, type, intentToRepeat, 0) // FLAG_UPDATE_CURRENT\r\n        val nm = CustomMessage().getNotificationManager(context)\r\n        //todo check zoom nullable\r\n        if(zoom == null) zoom = \"zoom not detected, but lesson coming\"\r\n        else intentToRepeat.putExtra(\"notif\", zoom)\r\n        val notification: Notification = configNotification(context, pendingIntent, nm as NotificationManager?, type, zoom).build()\r\n        nm?.notify(type, notification)\r\n    }\r\n\r\n    fun configNotification(context: Context, pendingIntent: PendingIntent?, nm: NotificationManager?, type : Int, zoom : String): NotificationCompat.Builder {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val channel = NotificationChannel(type.toString(),\r\n                \"Daily Notification\",\r\n                NotificationManager.IMPORTANCE_HIGH)\r\n            channel.description = \"Daily Notification\"\r\n            nm?.createNotificationChannel(channel)\r\n        }\r\n        //Создание пуша\r\n        return NotificationCompat.Builder(context, \"default\")\r\n            .setContentIntent(pendingIntent)\r\n            .setSmallIcon(R.drawable.ic_delete)\r\n            .setContentTitle(zoom)\r\n            .setAutoCancel(true)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/missclick/smartschedule/notifications/Receiver.kt	(revision 678745ce7236b15721f0fe575dd7de8e577bdbcd)
+++ app/src/main/java/com/missclick/smartschedule/notifications/Receiver.kt	(date 1604857698930)
@@ -10,6 +10,7 @@
 import android.content.Intent;
 import android.os.Build
 import android.R
+import android.util.Log
 
 import androidx.core.app.NotificationCompat;
 import com.missclick.smartschedule.MainActivity
@@ -19,18 +20,21 @@
     override fun onReceive(context: Context, intent: Intent) {
         val type = intent.getIntExtra(CustomMessage.TYPE_EXTRA, 0)
         var zoom = intent.getStringExtra("zoom")
+        var lessonName = intent.getStringExtra("lessonName")
         val intentToRepeat = Intent(context, MainActivity::class.java)
         intentToRepeat.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
         val pendingIntent = PendingIntent.getActivity(context, type, intentToRepeat, 0) // FLAG_UPDATE_CURRENT
         val nm = CustomMessage().getNotificationManager(context)
         //todo check zoom nullable
         if(zoom == null) zoom = "zoom not detected, but lesson coming"
+        if(lessonName == null) lessonName = "Smth will happen"
         else intentToRepeat.putExtra("notif", zoom)
-        val notification: Notification = configNotification(context, pendingIntent, nm as NotificationManager?, type, zoom).build()
+        val notification: Notification = configNotification(context, pendingIntent, nm as NotificationManager?, type, zoom, lessonName).build()
+        Log.e("Notif", notification.toString())
         nm?.notify(type, notification)
     }
 
-    fun configNotification(context: Context, pendingIntent: PendingIntent?, nm: NotificationManager?, type : Int, zoom : String): NotificationCompat.Builder {
+    fun configNotification(context: Context, pendingIntent: PendingIntent?, nm: NotificationManager?, type : Int, zoom : String, lessonName : String): NotificationCompat.Builder {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             val channel = NotificationChannel(type.toString(),
                 "Daily Notification",
@@ -42,7 +46,7 @@
         return NotificationCompat.Builder(context, "default")
             .setContentIntent(pendingIntent)
             .setSmallIcon(R.drawable.ic_delete)
-            .setContentTitle(zoom)
+            .setContentTitle(lessonName)
             .setAutoCancel(true)
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/missclick/smartschedule/notifications/CustomMessage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.missclick.smartschedule.notifications\r\n\r\nimport android.app.AlarmManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Context.ALARM_SERVICE\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport androidx.core.content.ContextCompat.getSystemService\r\nimport com.missclick.smartschedule.App\r\nimport com.missclick.smartschedule.data.repository.ILessonRepository\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\n\r\nclass CustomMessage {\r\n\r\n    @Inject\r\n    lateinit var repository: ILessonRepository\r\n\r\n    init {\r\n        App.appComponent.inject(this)\r\n    }\r\n\r\n    fun scheduleMsg(context: Context) { //Для запуска пушей вызвать это\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val days = repository.getAllDays()\r\n            for(day in days){\r\n                val lesson = repository.getLessonById(day.lessonId)\r\n//                val calendar = Calendar.getInstance()\r\n//                calendar.setTimeInMillis(System.currentTimeMillis())\r\n//                val time = getTimeByCouple(day.couple)\r\n//                calendar.set(Calendar.DAY_OF_WEEK, 1, 6, time[0], time[1], 0)\r\n//                calendar.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY)\r\n//                lesson.id?.let { day.couple.toString().let { it1 ->\r\n//                    scheduleMessage(\r\n//                        calendar, context, it,\r\n//                        it1\r\n//                    )\r\n//                } }\r\n\r\n                val calendar: Calendar = Calendar.getInstance().apply {\r\n                    timeInMillis = System.currentTimeMillis()\r\n                    val time = getTimeByCouple(day.couple)\r\n                    val dayOfWeek = getDayOfWeek(day.dayName)\r\n                    set(Calendar.DAY_OF_WEEK, dayOfWeek)\r\n                    set(Calendar.HOUR, time[0] - 12)\r\n                    set(Calendar.MINUTE, time[1])\r\n                }\r\n                if(calendar.timeInMillis < System.currentTimeMillis()) {\r\n                    calendar.add(Calendar.WEEK_OF_YEAR, day.week)\r\n                }\r\n                Log.e(\"Calendar\", calendar.timeInMillis.toString() + \" \" + lesson.lessonName)\r\n                lesson.id?.let {\r\n                    scheduleMessage(\r\n                        calendar, context, it,\r\n                        lesson.links[\"zoom\"].toString()\r\n                    )\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private fun scheduleMessage(calendar: Calendar, context: Context, type: Int, zoom: String) {\r\n        val i = Intent(context, Receiver::class.java)\r\n        i.putExtra(TYPE_EXTRA, type)\r\n        i.putExtra(\"zoom\", zoom)\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            type,\r\n            i,\r\n            0\r\n        )\r\n        val alarmManagerRTC = context.getSystemService(ALARM_SERVICE) as AlarmManager\r\n        alarmManagerRTC.setRepeating(\r\n            AlarmManager.RTC_WAKEUP, calendar.timeInMillis,\r\n            1000 * 3600 * 24 * 7 * 2  , pendingIntent\r\n        )\r\n    }\r\n\r\n    fun getNotificationManager(context: Context): Any? {\r\n        return context.getSystemService(Context.NOTIFICATION_SERVICE)\r\n    }\r\n\r\n    fun getTimeByCouple(couple: Int) : List<Int>{\r\n        if (couple == 1) return listOf(8, 27)\r\n        if (couple == 2) return listOf(10, 22)\r\n        return if (couple == 3) listOf(12, 17)\r\n        else listOf(14, 12)\r\n    }\r\n\r\n    private fun getDayOfWeek(day : String) : Int{\r\n        return when(day) {\r\n            \"Monday\" -> {\r\n                Calendar.MONDAY\r\n            }\r\n            \"Tuesday\" -> {\r\n                Calendar.TUESDAY\r\n            }\r\n            \"Wednesday\" -> {\r\n                Calendar.WEDNESDAY\r\n            }\r\n            \"Thursday\" -> {\r\n                Calendar.THURSDAY\r\n            }\r\n            \"Friday\" -> {\r\n                Calendar.FRIDAY\r\n            }\r\n            \"Saturday\" -> {\r\n                Calendar.SATURDAY\r\n            }\r\n            else -> {\r\n                Calendar.SUNDAY\r\n            }\r\n        }\r\n    }\r\n\r\n    fun cancel(context: Context){\r\n        val alarmManagerRTC = context.getSystemService(ALARM_SERVICE) as AlarmManager\r\n        val intent = Intent(context, Receiver::class.java)\r\n        val pendingIntent = PendingIntent.getBroadcast(context, 1, intent, 0)\r\n        alarmManagerRTC.cancel(pendingIntent)\r\n    }\r\n\r\n    companion object {\r\n        const val TYPE_EXTRA = \"type\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/missclick/smartschedule/notifications/CustomMessage.kt	(revision 678745ce7236b15721f0fe575dd7de8e577bdbcd)
+++ app/src/main/java/com/missclick/smartschedule/notifications/CustomMessage.kt	(date 1604857771433)
@@ -45,7 +45,7 @@
                 val calendar: Calendar = Calendar.getInstance().apply {
                     timeInMillis = System.currentTimeMillis()
                     val time = getTimeByCouple(day.couple)
-                    val dayOfWeek = getDayOfWeek(day.dayName)
+                    val dayOfWeek = getDayOfWeek("kek")
                     set(Calendar.DAY_OF_WEEK, dayOfWeek)
                     set(Calendar.HOUR, time[0] - 12)
                     set(Calendar.MINUTE, time[1])
@@ -57,7 +57,8 @@
                 lesson.id?.let {
                     scheduleMessage(
                         calendar, context, it,
-                        lesson.links["zoom"].toString()
+                        lesson.links["zoom"].toString(),
+                        lesson.lessonName
                     )
                 }
 
@@ -69,10 +70,11 @@
     }
 
 
-    private fun scheduleMessage(calendar: Calendar, context: Context, type: Int, zoom: String) {
+    private fun scheduleMessage(calendar: Calendar, context: Context, type: Int, zoom: String, lessonName : String) {
         val i = Intent(context, Receiver::class.java)
         i.putExtra(TYPE_EXTRA, type)
         i.putExtra("zoom", zoom)
+       // i.putExtra("lessonName", lessonName)
         val pendingIntent = PendingIntent.getBroadcast(
             context,
             type,
@@ -93,7 +95,7 @@
     fun getTimeByCouple(couple: Int) : List<Int>{
         if (couple == 1) return listOf(8, 27)
         if (couple == 2) return listOf(10, 22)
-        return if (couple == 3) listOf(12, 17)
+        return if (couple == 3) listOf(19, 50)
         else listOf(14, 12)
     }
 
